/**
 * A collection of classes to ease the consumption of Palo Alto Networks Cortex
 * API's
 * 
 * The main goals of this package are, in one hand, to provide full low-level
 * coverage of the following Cortex API's and, in the other hand, implement
 * convenience high level interfaces to traverse large response sets (to
 * abstract the developer from the tedious task of implementing pagination
 * controls or response parsers).
 * 
 * <ul>
 * <li>Query Service</li>
 * </ul>
 * 
 * <h2>Overview</h2> The library is composed of a HTTP/2 connectivity layer
 * implemented by the {@code Http2Fetch} class and by a low-level collection of
 * classes providing access to their corresponding Cortex API's. For instance,
 * the {@code QueryService} class is responsible for providing methods to create
 * query jobs, get their running status, retrieve jobs results, etc.
 * <p>
 * Some low-level classes have a high-level companion subclass implementing
 * convenience interfaces to abstract unnecessary complexity to the developer.
 * For instance, the {@code QueryServiceClient} implements the
 * {@code java.lang.Iterable} and {@code java.util.stream.Stream} interface to
 * navigate through the results generated by a given query job.
 * <p>
 * This package provides, as well, a set of helper classes that mimic both the
 * payloads and responses required/provided by the different API's. For
 * instance, the developer can instantiate a {@code QueryParams} object be used
 * in the {@link QueryService#createJob(String, QueryParams, CredentialTuple)}
 * method and will receive a {@code QueryJob} object instantiated with the JSON
 * parsed response obtained from the API call.
 * <p>
 * Parsing validity both of the requests and responses is also part of the
 * feature set provided by this package. Checked
 * {@code QueryServiceParseException} exceptions are thrown in these conditions.
 * Unchecked {@code QueryServiceParseRuntimeException} exceptions are thrown
 * when the developer is using the provided async methods.
 * <p>
 * Non 2xx/3xx responses provided by the Cortex API are converted into checked
 * {@code QueryServiceException} / unchecked
 * {@code QueryServiceRuntimeException} exceptions.
 * <p>
 * Any external exception like {@code java.io.IOException} generated by the JAVA
 * runtine or dependant packages is transparently forwarded to the developer.
 * <h2>Installation</h2> Either build from the sources or download an already
 * compiled package from TBD into a folder pointed by your CLASSPATH environment
 * variable. The package has a single dependency: the javax.json API. So you'll
 * need, as well, to download both the API implementation and its Service
 * Provider into a CLASSPATH covered folder.
 * <p>
 * The package CI/CD build process uses version 1.1.14 of
 * org.glassfish.javax.json and its companion javax.json packages so it is
 * highly recommended to use them in production as well.
 * 
 * <h2>Quickstart</h2> This section should give a good indiction of how to get
 * started with this package
 * <h3>Querying the Cortex Data Lake</h3> The following very basic example
 * illustrates how to execute a basic SQL job in the Cortex Query API service
 * and navigate through its results using the Iterable interface.
 * 
 * <pre>
 * import java.util.Map; 
 * import java.util.Map.Entry; 
 * import java.util.AbstractMap.SimpleImmutableEntry; 
 * import java.util.function.Function; 
 *  
 * import com.paloaltonetworks.cortex.data_lake.Constants; 
 * import com.paloaltonetworks.cortex.data_lake.QueryServiceClient; 
 *  
 * public class StreamExample { 
 *     private static final String accessToken = "eyJh...yx7Q"; 
 *     private static final String sqlCmd = "SELECT * FROM `&lt;instance_id&gt;.firewall.traffic` LIMIT 100"; 
 *     private static final Function&lt;Boolean, Map.Entry&lt;String, String&gt;&gt; cred = new Function&lt;Boolean, Map.Entry&lt;String, String&gt;&gt;() { 
 *  
 *         public Entry&lt;String, String&gt; apply(Boolean force) { 
 *             if (force != null &amp;&amp; force) { 
 *                 return new SimpleImmutableEntry&lt;String, String&gt;(Constants.USFQDN, accessToken); 
 *             } else { 
 *                 return null; 
 *             } 
 *         } 
 *     }; 
 *  
 *     public static void main(String[] args) throws Exception { 
 *         QueryServiceClient qsc = new QueryServiceClient(cred); 
 *         qsc.stream(sqlCmd).forEach((item) -&gt; System.out.println(item)); 
 *     } 
 * } 
 * </pre>
 * 
 * In this case the developer is instantiating the {@code QueryServiceClient}
 * class because he is only interested on running the query and processing the
 * results. The {@code QueryServiceClient} takes care of everything (creating
 * the job, polling for it to be completed, paginating through the results and
 * deleting the job once all of them have been consumed).
 * <p>
 * A collection of compatible `Credentials` objects as well as building blocks
 * to interface with Cortex hub OAuth2 authentication is available in the
 * package <code>com.paloaltonetworks.cortex.hub</code> at <a
 * href="https://github.com/xhoms/pan-cortex-hub-java">https://github.com/xhoms/pan-cortex-hub-java</a>
 * <p>
 * To access all these method individually you migh instantiate the
 * {@code QueryService} class instead. But, as they're exposed in the
 * {@code QueryServiceClient} as well (subclass), developers might end up
 * working always with the high level implementations of any given service (when
 * available).
 * <p>
 * All service classes ({@code QueryServiceClient} in this case) provide
 * constructors to reuse a {@code Http2Fetch} object so the developer can share
 * the same TLS connection options when working with multiple Cortex services at
 * once. Constructors based on URI atributes are also available. In the previous
 * case, the constructor of the {@code QueryServiceClient} object instantiates a
 * mTLS-based {@code Http2Fetch} object using provided PKCS12 client certificate
 * filename and password.
 * 
 * @see <a href=
 *      "https://repo1.maven.org/maven2/org/glassfish/javax.json/1.1.4">org.glassfish</a>
 * @see <a href=
 *      "https://repo1.maven.org/maven2/javax/json/javax.json-api/1.1.4/">javax.json</a>
 * 
 */
package com.paloaltonetworks.cortex.data_lake;